import 'package:flutter/material.dart';

class Todo {
  final String uname;
  final String uid;

  const Todo(this.uname, this.uid);
}

void main() => runApp(const MyApp());

class MyApp extends StatelessWidget {
  const MyApp({super.key});

  @override
  Widget build(BuildContext context) {
    const appTitle = 'Form Validation Demo';

    return const MaterialApp(
      title: appTitle,
      home: FirstScreen(
        todos: Todo("tdn", "tdid"),
      ),
      // initialRoute: '/',
      // routes: {
      //   // When navigating to the "/" route, build the FirstScreen widget.
      //   '/': (context) => const FirstScreen(
      //         todos: Todo("tdn", "tdid"),
      //       ),
      //   // When navigating to the "/second" route, build the SecondScreen widget.
      //   '/second': (context) => const SecondScreen(text: String("11")),
      // },
    );
  }
}

// Define a custom Form widget.
class FirstScreen extends StatefulWidget {
  const FirstScreen({super.key, required this.todos});

  final Todo todos;

  @override
  State<FirstScreen> createState() => _MyCustomFormState();
}

// Define a corresponding State class.
// This class holds data related to the Form.
class _MyCustomFormState extends State<FirstScreen> {
  // Create a text controller and use it to retrieve the current value
  // of the TextField.
  final myController = TextEditingController();
  TextEditingController name = TextEditingController();
  TextEditingController pass = TextEditingController();
  TextEditingController id = TextEditingController();
  TextEditingController em = TextEditingController();

  // _MyCustomFormState({required this.todos});

  // final Todo todos();

  @override
  void initState() {
    super.initState();

    // Start listening to changes.
    myController.addListener(_printLatestValue);
  }

  @override
  void dispose() {
    // Clean up the controller when the widget is removed from the widget tree.
    // This also removes the _printLatestValue listener.
    myController.dispose();
    super.dispose();
  }

  void _printLatestValue() {
    print('Second text field: ${myController.text}');
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Input'),
      ),
      body: Padding(
        padding: const EdgeInsets.all(30.0),
        child: Column(
          children: [
            Container(
                alignment: Alignment.center,
                padding: const EdgeInsets.all(10),
                child: const Text(
                  'User Form',
                  style: TextStyle(
                      color: Colors.blue,
                      fontWeight: FontWeight.w500,
                      fontSize: 30),
                )),

            const SizedBox(
              height: 30,
            ),

            TextField(
              controller: name,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'User Name',
              ),
              onChanged: (text) {
                // ignore: avoid_print
                print('1st text field: $text');
              },
            ),
            // TextField(
            //   controller: myController,
            // ),
            const SizedBox(
              height: 25,
            ),
            TextField(
              controller: id,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'User ID',
              ),
              onChanged: (text) {
                // ignore: avoid_print
                print('2nd text field: $text');
              },
            ),

            const SizedBox(
              height: 25,
            ),

            TextField(
              controller: em,
              decoration: const InputDecoration(
                border: OutlineInputBorder(),
                labelText: 'User email',
              ),
              onChanged: (text) {
                // ignore: avoid_print
                print('3rd text field: $text');
              },
            ),

            const SizedBox(
              height: 200,
            ),

            ElevatedButton(
              // Within the SecondScreen widget
              onPressed: () {
                // Navigate back to the first screen by popping the current route
                // off the stack.
                // context: Text(myController.text),
                // print('Submit:', $idController.text);
                // AuthProvider().register(name.text, email.text, updatedPhone,
                //     password.text, 'BD', context);
                // Navigator.push(id.text, '/second');
                // showDialog(
                //   context: context,
                //   builder: (context) {
                //     return AlertDialog(
                //       // Retrieve the text the that user has entered by using the
                //       // TextEditingController.
                //       content: Text(id.text),
                //     );
                //   },
                // );
                Navigator.push(
                  context,
                  MaterialPageRoute(
                    builder: (context) => SecondScreen(
                      name: name.text,
                      id: id.text,
                      em: em.text,
                    ),
                  ),
                );
                // Navigator.pushNamed(context, '/second');
              },
              child: const Text('Submit!'),
            ),
          ],
        ),
      ),
    );
  }
}

// // Create a Form widget.
// class FirstScreen extends StatefulWidget {
//   const FirstScreen({super.key});
//   @override
//   FirstScreenState createState() {
//     return FirstScreenState();
//   }
// }

// // Create a corresponding State class.
// // This class holds data related to the form.
// class FirstScreenState extends State<FirstScreen> {
//   // Create a global key that uniquely identifies the Form widget
//   // and allows validation of the form.
//   //
//   // Note: This is a GlobalKey<FormState>,
//   // not a GlobalKey<MyCustomFormState>.

//   final _formKey = GlobalKey<FormState>();

//   @override
//   Widget build(BuildContext context) {
//     // Build a Form widget using the _formKey created above.

//     // // old first
//     // return Scaffold(
//     //   appBar: AppBar(
//     //     title: const Text('First Screen'),
//     //   ),
//     //   body: Center(
//     //     child: ElevatedButton(
//     //       // Within the `FirstScreen` widget
//     //       onPressed: () {
//     //         // Navigate to the second screen using a named route.
//     //         Navigator.pushNamed(context, '/second');
//     //       },
//     //       child: const Text('Launch screen'),
//     //     ),
//     //   ),
//     // );

//     // return Form(
//     //   key: _formKey,
//     //   child: Column(
//     //     crossAxisAlignment: CrossAxisAlignment.start,
//     //     children: [
//     //       TextFormField(
//     //         // The validator receives the text that the user has entered.
//     //         validator: (value) {
//     //           if (value == null || value.isEmpty) {
//     //             return 'Please enter some text';
//     //           }
//     //           return null;
//     //         },
//     //       ),
//     //       Padding(
//     //         padding: const EdgeInsets.symmetric(vertical: 16.0),
//     //         child: ElevatedButton(
//     //           onPressed: () {
//     //             // Validate returns true if the form is valid, or false otherwise.
//     //             if (_formKey.currentState!.validate()) {
//     //               // If the form is valid, display a snackbar. In the real world,
//     //               // you'd often call a server or save the information in a database.
//     //               ScaffoldMessenger.of(context).showSnackBar(
//     //                 const SnackBar(content: Text('Processing Data')),
//     //               );
//     //             }
//     //           },
//     //           child: const Text('Submit'),
//     //         ),
//     //       ),
//     //     ],
//     //   ),
//     // );
//   }
// }

// class FirstScreen extends StatelessWidget {
//   const FirstScreen({super.key});

//   @override
//   Widget build(BuildContext context) {
//     return Scaffold(
//       appBar: AppBar(
//         title: const Text('First Screen'),
//       ),
//       body: Center(
//         child: ElevatedButton(
//           // Within the `FirstScreen` widget
//           onPressed: () {
//             // Navigate to the second screen using a named route.
//             Navigator.pushNamed(context, '/second');
//           },
//           child: const Text('Launch screen'),
//         ),
//       ),
//     );
//   }
// }

// body: ListView.builder(
//           // Let the ListView know how many items it needs to build.
//           itemCount: items.length,
//           // Provide a builder function. This is where the magic happens.
//           // Convert each item into a widget based on the type of item it is.
//           itemBuilder: (context, index) {
//             final item = items[index];

//             return ListTile(
//               title: item.buildTitle(context),
//               subtitle: item.buildSubtitle(context),
//             );
//           },
//         ),

class SecondScreen extends StatelessWidget {
  const SecondScreen({
    super.key,
    required this.name,
    required this.id,
    required this.em,
  });
  // final String t = text;
  final String name;
  final String id;
  final String em;

  // final String sentenceToWord = 'I \nwant \nto \nsplit \nthis';

  // @override
  // Widget build(BuildContext context) {
  //   return Scaffold(
  //     appBar: AppBar(
  //       title: const Text('Flutter Demo HomePage'),
  //     ),
  //     body: Center(
  //       child: Column(
  //         mainAxisAlignment: MainAxisAlignment.center,
  //         children: <Widget>[
  //           Text(name),
  //         ],
  //       ),
  //     ),
  //   );
  // }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      appBar: AppBar(
        title: const Text('Output'),
      ),

      // body: Center(
      //   child: Column(
      //     // mainAxisAlignment: MainAxisAlignment.center,
      //     children: <Widget>[
      //       Text(name),
      //       Text(id),
      //       Text(em),
      //     ],
      //   ),
      // ),

      body: ListView(
        children: [
          _tile('CineArts at the Empire', name, Icons.theaters),
          _tile('The Castro Theater', '429 Castro St', Icons.theaters),
          _tile('Alamo Drafthouse Cinema', '2550 Mission St', Icons.theaters),
          _tile('Roxie Theater', '3117 16th St', Icons.theaters),
          _tile('United Artists Stonestown Twin', '501 Buckingham Way',
              Icons.theaters),
          _tile('AMC Metreon 16', '135 4th St #3000', Icons.theaters),
          const Divider(),
          _tile('K\'s Kitchen', '757 Monterey Blvd', Icons.restaurant),
          _tile('Emmy\'s Restaurant', '1923 Ocean Ave', Icons.restaurant),
          _tile(
              'Chaiya Thai Restaurant', '272 Claremont Blvd', Icons.restaurant),
          _tile('La Ciccia', '291 30th St', Icons.restaurant),
        ],
      ),

      // body: ListView(
      //   children: <Widget>[
      //     const ListTile(
      //       leading: Icon(Icons.person),
      //       title: Text('User'),
      //     ),
      //     Text(
      //       name,
      //       textAlign: TextAlign.center,
      //       style: const TextStyle(
      //         color: Colors.blue,
      //         fontSize: 30,
      //       ),
      //     ),
      //     const ListTile(
      //       leading: Icon(Icons.numbers),
      //       title: Text('ID'),
      //     ),
      //     Text(
      //       id,
      //       textAlign: TextAlign.center,
      //       style: const TextStyle(
      //         color: Colors.blue,
      //         fontSize: 30,
      //       ),
      //     ),
      //     const ListTile(
      //       leading: Icon(Icons.email),
      //       title: Text('Email'),
      //     ),
      //     Text(
      //       em,
      //       textAlign: TextAlign.center,
      //       style: const TextStyle(
      //         color: Colors.blue,
      //         fontSize: 30,
      //       ),
      //     ),

      //   ],

      // ),

      // body: Padding(
      //   padding: const EdgeInsets.all(30.0),
      //   child: Column(
      //     children: [
      //       Container(
      //           alignment: Alignment.center,
      //           padding: const EdgeInsets.all(10),
      //           child: const Text(
      //             'User Input',
      //             style: TextStyle(
      //                 color: Colors.blue,
      //                 fontWeight: FontWeight.w500,
      //                 fontSize: 30),
      //           )),
      //       const SizedBox(
      //         height: 30,
      //       ),

      //       Container(
      //           padding: const EdgeInsets.all(10),
      //           child: const Text(
      //             'name',
      //             // style: TextStyle(fontWeight: FontWeight.w500, fontSize: 30),
      //           )),
      //       const SizedBox(
      //         height: 30,
      //       ),
      //       ElevatedButton(
      //         // Within the SecondScreen widget
      //         onPressed: () {
      //           print('From table: name field: $name');
      //           Navigator.pop(context);
      //         },
      //         child: const Text('Back!'),
      //       ),
      //     ],
      //   ),
      // ),
    );
  }
}

class MessageItem implements ListItem {
  final String sender;
  final String id;
  final String body;

  MessageItem(this.sender, this.id, this.body);

  @override
  Widget buildSubtitle(BuildContext context) => Text(body);
}

abstract class ListItem {
  Widget buildSubtitle(BuildContext context);
}

ListTile _tile(String title, String subtitle, IconData icon) {
  return ListTile(
    title: Text(title,
        style: const TextStyle(
          fontWeight: FontWeight.w500,
          fontSize: 20,
        )),
    subtitle: Text(subtitle),
    leading: Icon(
      icon,
      color: Colors.blue[500],
    ),
  );
}
